#https://repl.it/@billbuchanan/getprimen
import Crypto.Util.number
import sys
import math
import time
from bitstuffing import bitstuffX, bitstuffY, bitstuffZ
from destuffing import destuffZ, destuffY, destuffX

#Get bit-length from user input
bit_input = int(input("\n\x1b[32m\x1b[1mEnter your bit-length:\x1b[30m ")) 
print ("\n\x1b[0m")

time.sleep(1)
print ("\x1b[3m\x1b[33mGenerating and computing for keys . . . . . .")
time.sleep(2)
print (".  .  .  . .  .  .  .  .  .  .  .  . ")
time.sleep(1)
print (". . . ")
time.sleep(1)
print ("\n\x1b[0m")

#Divides bit-length into 3 for the 3 prime numbers and get the whole number
bits=math.floor(bit_input/3)
if (len(sys.argv)>1):
        bits=int(sys.argv[1])

#Produces 3 random-bit prime number
print ("=================================================================================================================================================")
print ("No of bits in prime is ",bits)

print ("\n\x1b[36m\x1b[1mGenerated Random Prime keys: \x1b[0m")
p=Crypto.Util.number.getPrime(bits, randfunc=Crypto.Random.get_random_bytes)
print ("Random n-bit Prime (p): ",p)
q=Crypto.Util.number.getPrime(bits, randfunc=Crypto.Random.get_random_bytes)
print ("Random n-bit Prime (q): ",q)
r=Crypto.Util.number.getPrime(bits, randfunc=Crypto.Random.get_random_bytes)
print ("Random n-bit Prime (r): ",r)
print ("=================================================================================================================================================")

#Computes the whole bit-length (N)
N=p*q*r 
print ("\n\x1b[36m\x1b[1mN = p*q*r =\x1b[0m",N) 

#Computes for the Totient of N 
PHI=(p-1)*(q-1)*(r-1)
print ("\n\x1b[36m\x1b[1mPHI = (p-1)(q-1)(r-1) =\x1b[0m",PHI)

#Public key (e)
e=65537
print ("\n\x1b[36m\x1b[1me =\x1b[0m",e)

#Computes for the Private/Secret Key (d)
d=Crypto.Util.number.inverse(e,PHI)
print ("\x1b[36m\x1b[1md =\x1b[0m",d)

#print ("\nCount of decimal digits (p): ",len(str(p))) 
#print ("Count of decimal digits (N): ",len(str(N)))

#Get message input from user 
print ("\n")
plain_text = input("\x1b[32m \x1b[1m Write msg:\x1b[30m ")
#print([ord(c) for c in plain_text]) #Converts string into uni code
print ("\n\x1b[0m")

#timer 
enc_st = time.time()

#Encryption of text message
print ("\n\x1b[1mRSA Message: \x1b[0m", plain_text)
CipherText = [pow(ord(c), e, N) for c in plain_text]
print ("\x1b[1m\x1b[31mRSA Cipher (c = M^e mod N): \x1b[0m", CipherText)

#Conversion of Decimal to Binary 
def decimal_to_binary(CipherText):
    BinaryText = []
    for decimal_number in CipherText:
        binary_string = ""
        while decimal_number > 0:
            remainder = decimal_number % 2
            binary_string = str(remainder) + binary_string
            decimal_number //= 2
        BinaryText.append(binary_string)
    return BinaryText

print("\n---------------------------------------------------------------------------------------------------------------------------")
BinaryText = decimal_to_binary(CipherText)
print("\x1b[36m\x1b[1mBinary Text:\x1b[0m", BinaryText)
print("\n")


#BitStuffing
bitX = bitstuffX(BinaryText)
bitY = bitstuffY(bitX)
bitZ = bitstuffZ(bitY)

print("====== bit stuffing ======")
print("\n\x1b[36m\x1b[1mbit X:\x1b[0m", bitX)
print("\n\x1b[36m\x1b[1mbit Y:\x1b[0m", bitY)
print("\n\x1b[36m\x1b[1mbit Z:\x1b[0m", bitZ)

BinaryText = bitZ

enc_et = time.time()
enc_elapsedTime = enc_et - enc_st

#Send message to the internet
print ("\n\x1b[3m\x1b[33mSending encrypted message to the internet . . . . ")
time.sleep(2)
print (".  .  .  . .  .  .  .  .  . ")
time.sleep(1)
print (". . . ")
time.sleep(1)
print ("\x1b[0m	")

dec_st = time.time()
print("\n---------------------------------------------------------------------------------------------------------------------------")
#DeStuffing
desZ = destuffZ(BinaryText)
desY = destuffY(desZ)
desX = destuffX(desY)

print("====== de stuffing ======")
print("\n\x1b[36m\x1b[1mDestuff bit Z :\x1b[0m", desZ)
print("\n\x1b[36m\x1b[1mDestuff bit Y :\x1b[0m", desY)
print("\n\x1b[36m\x1b[1mDestuff bit X :\x1b[0m", desX)

BinaryText = desX

#Convertion of Binary to Decimal
def binary_to_decimal(BinaryText):
    decimal = 0
    for i, digit in enumerate(BinaryText[::-1]):
        if digit == '1':
            decimal += 2 ** i
    return decimal

CipherText = []
for binary in BinaryText:
    CipherText.append(binary_to_decimal(binary))

print("\x1b[36m\x1b[1m\nBinary Decrypted CipherText:\x1b[0m", CipherText) 


#Decryption process
Decryption = [(pow(c, d, N)) for c in CipherText]
print ("\x1b[36m\x1b[1m\nRSA Decipher (c^d mod N):\x1b[0m", Decryption)
DT = [chr(c) for c in Decryption]
DecryptedText = (''.join(DT))
dec_et = time.time() 
dec_elapsedTime = dec_et - dec_st

print ("\n\x1b[3m\x1b[33mPrinting Results . . . . ")
time.sleep(2)
print (".  .  .  . .  .  .  .  .  .  .  .  . ")
time.sleep(1)
print (". . . ")
time.sleep(1)
print ("\x1b[0m	")

#Output
print ("\x1b[32m\x1b[1mResult: ==============================================================\x1b[0m")
print ("\nEncryption Elapsed Time:", (enc_elapsedTime * 1000), "milliseconds")
print ("Decryption Elapsed Time:", (dec_elapsedTime*1000), "milliseconds")
print ("\x1b[32m\n\nDecrypted Message:\x1b[1m " + DecryptedText, "\x1b[0m")
print ("\n\n")


